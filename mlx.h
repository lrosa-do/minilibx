/*
** mlx.h for MinilibX in
**
** Made by Charlie Root
** Login   <ol@epitech.net>
**
** Started on  Mon Jul 31 16:37:50 2000 Charlie Root
** Last update Tue May 15 16:23:28 2007 Olivier Crouzet
** Started on  07/06 17:00:50 2022 Charlie Root

** Port to SDL2 By Luis Santos AKA DJOKER
*/

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   minilibx SDL2 Port                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lrosa-do <lrosa-do@student.42lisboa>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/06/15 18:20:43 by lrosa-do          #+#    #+#             */
/*   Updated: 2022/06/25 09:18:57 by lrosa-do         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


#ifndef MLX_H
#define	MLX_H

//https://wiki.libsdl.org/SDL_Keycode

typedef enum
{
    KEY_SCANCODE_UNKNOWN = 0,
    KEY_SCANCODE_A = 4,
    KEY_SCANCODE_B = 5,
    KEY_SCANCODE_C = 6,
    KEY_SCANCODE_D = 7,
    KEY_SCANCODE_E = 8,
    KEY_SCANCODE_F = 9,
    KEY_SCANCODE_G = 10,
    KEY_SCANCODE_H = 11,
    KEY_SCANCODE_I = 12,
    KEY_SCANCODE_J = 13,
    KEY_SCANCODE_K = 14,
    KEY_SCANCODE_L = 15,
    KEY_SCANCODE_M = 16,
    KEY_SCANCODE_N = 17,
    KEY_SCANCODE_O = 18,
    KEY_SCANCODE_P = 19,
    KEY_SCANCODE_Q = 20,
    KEY_SCANCODE_R = 21,
    KEY_SCANCODE_S = 22,
    KEY_SCANCODE_T = 23,
    KEY_SCANCODE_U = 24,
    KEY_SCANCODE_V = 25,
    KEY_SCANCODE_W = 26,
    KEY_SCANCODE_X = 27,
    KEY_SCANCODE_Y = 28,
    KEY_SCANCODE_Z = 29,

    KEY_SCANCODE_1 = 30,
    KEY_SCANCODE_2 = 31,
    KEY_SCANCODE_3 = 32,
    KEY_SCANCODE_4 = 33,
    KEY_SCANCODE_5 = 34,
    KEY_SCANCODE_6 = 35,
    KEY_SCANCODE_7 = 36,
    KEY_SCANCODE_8 = 37,
    KEY_SCANCODE_9 = 38,
    KEY_SCANCODE_0 = 39,

    KEY_SCANCODE_RETURN = 40,
    KEY_SCANCODE_ESCAPE = 41,
    KEY_SCANCODE_BACKSPACE = 42,
    KEY_SCANCODE_TAB = 43,
    KEY_SCANCODE_SPACE = 44,

    KEY_SCANCODE_MINUS = 45,
    KEY_SCANCODE_EQUALS = 46,
    KEY_SCANCODE_LEFTBRACKET = 47,
    KEY_SCANCODE_RIGHTBRACKET = 48,
    KEY_SCANCODE_BACKSLASH = 49, 
    KEY_SCANCODE_NONUSHASH = 50, 
    KEY_SCANCODE_SEMICOLON = 51,
    KEY_SCANCODE_APOSTROPHE = 52,
    KEY_SCANCODE_GRAVE = 53, 
    KEY_SCANCODE_COMMA = 54,
    KEY_SCANCODE_PERIOD = 55,
    KEY_SCANCODE_SLASH = 56,

    KEY_SCANCODE_CAPSLOCK = 57,

    KEY_SCANCODE_F1 = 58,
    KEY_SCANCODE_F2 = 59,
    KEY_SCANCODE_F3 = 60,
    KEY_SCANCODE_F4 = 61,
    KEY_SCANCODE_F5 = 62,
    KEY_SCANCODE_F6 = 63,
    KEY_SCANCODE_F7 = 64,
    KEY_SCANCODE_F8 = 65,
    KEY_SCANCODE_F9 = 66,
    KEY_SCANCODE_F10 = 67,
    KEY_SCANCODE_F11 = 68,
    KEY_SCANCODE_F12 = 69,

    KEY_SCANCODE_PRINTSCREEN = 70,
    KEY_SCANCODE_SCROLLLOCK = 71,
    KEY_SCANCODE_PAUSE = 72,
    KEY_SCANCODE_INSERT = 73, 
    KEY_SCANCODE_HOME = 74,
    KEY_SCANCODE_PAGEUP = 75,
    KEY_SCANCODE_DELETE = 76,
    KEY_SCANCODE_END = 77,
    KEY_SCANCODE_PAGEDOWN = 78,
    KEY_SCANCODE_RIGHT = 79,
    KEY_SCANCODE_LEFT = 80,
    KEY_SCANCODE_DOWN = 81,
    KEY_SCANCODE_UP = 82,
    KEY_SCANCODE_NUMLOCKCLEAR = 83, 
    KEY_SCANCODE_KP_DIVIDE = 84,
    KEY_SCANCODE_KP_MULTIPLY = 85,
    KEY_SCANCODE_KP_MINUS = 86,
    KEY_SCANCODE_KP_PLUS = 87,
    KEY_SCANCODE_KP_ENTER = 88,
    KEY_SCANCODE_KP_1 = 89,
    KEY_SCANCODE_KP_2 = 90,
    KEY_SCANCODE_KP_3 = 91,
    KEY_SCANCODE_KP_4 = 92,
    KEY_SCANCODE_KP_5 = 93,
    KEY_SCANCODE_KP_6 = 94,
    KEY_SCANCODE_KP_7 = 95,
    KEY_SCANCODE_KP_8 = 96,
    KEY_SCANCODE_KP_9 = 97,
    KEY_SCANCODE_KP_0 = 98,
    KEY_SCANCODE_KP_PERIOD = 99,
    KEY_SCANCODE_NONUSBACKSLASH = 100,
    KEY_SCANCODE_APPLICATION = 101,
    KEY_SCANCODE_POWER = 102,
    KEY_SCANCODE_KP_EQUALS = 103,
    KEY_SCANCODE_F13 = 104,
    KEY_SCANCODE_F14 = 105,
    KEY_SCANCODE_F15 = 106,
    KEY_SCANCODE_F16 = 107,
    KEY_SCANCODE_F17 = 108,
    KEY_SCANCODE_F18 = 109,
    KEY_SCANCODE_F19 = 110,
    KEY_SCANCODE_F20 = 111,
    KEY_SCANCODE_F21 = 112,
    KEY_SCANCODE_F22 = 113,
    KEY_SCANCODE_F23 = 114,
    KEY_SCANCODE_F24 = 115,
    KEY_SCANCODE_EXECUTE = 116,
    KEY_SCANCODE_HELP = 117,
    KEY_SCANCODE_MENU = 118,
    KEY_SCANCODE_SELECT = 119,
    KEY_SCANCODE_STOP = 120,
    KEY_SCANCODE_AGAIN = 121,   /**< redo */
    KEY_SCANCODE_UNDO = 122,
    KEY_SCANCODE_CUT = 123,
    KEY_SCANCODE_COPY = 124,
    KEY_SCANCODE_PASTE = 125,
    KEY_SCANCODE_FIND = 126,
    KEY_SCANCODE_MUTE = 127,
    KEY_SCANCODE_VOLUMEUP = 128,
    KEY_SCANCODE_VOLUMEDOWN = 129,
    KEY_SCANCODE_KP_COMMA = 133,
    KEY_SCANCODE_KP_EQUALSAS400 = 134,

    KEY_SCANCODE_INTERNATIONAL1 = 135, 
    KEY_SCANCODE_INTERNATIONAL2 = 136,
    KEY_SCANCODE_INTERNATIONAL3 = 137, /**< Yen */
    KEY_SCANCODE_INTERNATIONAL4 = 138,
    KEY_SCANCODE_INTERNATIONAL5 = 139,
    KEY_SCANCODE_INTERNATIONAL6 = 140,
    KEY_SCANCODE_INTERNATIONAL7 = 141,
    KEY_SCANCODE_INTERNATIONAL8 = 142,
    KEY_SCANCODE_INTERNATIONAL9 = 143,
    KEY_SCANCODE_LANG1 = 144, /**< Hangul/English toggle */
    KEY_SCANCODE_LANG2 = 145, /**< Hanja conversion */
    KEY_SCANCODE_LANG3 = 146, /**< Katakana */
    KEY_SCANCODE_LANG4 = 147, /**< Hiragana */
    KEY_SCANCODE_LANG5 = 148, /**< Zenkaku/Hankaku */
    KEY_SCANCODE_LANG6 = 149, /**< reserved */
    KEY_SCANCODE_LANG7 = 150, /**< reserved */
    KEY_SCANCODE_LANG8 = 151, /**< reserved */
    KEY_SCANCODE_LANG9 = 152, /**< reserved */

    KEY_SCANCODE_ALTERASE = 153, /**< Erase-Eaze */
    KEY_SCANCODE_SYSREQ = 154,
    KEY_SCANCODE_CANCEL = 155,
    KEY_SCANCODE_CLEAR = 156,
    KEY_SCANCODE_PRIOR = 157,
    KEY_SCANCODE_RETURN2 = 158,
    KEY_SCANCODE_SEPARATOR = 159,
    KEY_SCANCODE_OUT = 160,
    KEY_SCANCODE_OPER = 161,
    KEY_SCANCODE_CLEARAGAIN = 162,
    KEY_SCANCODE_CRSEL = 163,
    KEY_SCANCODE_EXSEL = 164,

    KEY_SCANCODE_KP_00 = 176,
    KEY_SCANCODE_KP_000 = 177,
    KEY_SCANCODE_THOUSANDSSEPARATOR = 178,
    KEY_SCANCODE_DECIMALSEPARATOR = 179,
    KEY_SCANCODE_CURRENCYUNIT = 180,
    KEY_SCANCODE_CURRENCYSUBUNIT = 181,
    KEY_SCANCODE_KP_LEFTPAREN = 182,
    KEY_SCANCODE_KP_RIGHTPAREN = 183,
    KEY_SCANCODE_KP_LEFTBRACE = 184,
    KEY_SCANCODE_KP_RIGHTBRACE = 185,
    KEY_SCANCODE_KP_TAB = 186,
    KEY_SCANCODE_KP_BACKSPACE = 187,
    KEY_SCANCODE_KP_A = 188,
    KEY_SCANCODE_KP_B = 189,
    KEY_SCANCODE_KP_C = 190,
    KEY_SCANCODE_KP_D = 191,
    KEY_SCANCODE_KP_E = 192,
    KEY_SCANCODE_KP_F = 193,
    KEY_SCANCODE_KP_XOR = 194,
    KEY_SCANCODE_KP_POWER = 195,
    KEY_SCANCODE_KP_PERCENT = 196,
    KEY_SCANCODE_KP_LESS = 197,
    KEY_SCANCODE_KP_GREATER = 198,
    KEY_SCANCODE_KP_AMPERSAND = 199,
    KEY_SCANCODE_KP_DBLAMPERSAND = 200,
    KEY_SCANCODE_KP_VERTICALBAR = 201,
    KEY_SCANCODE_KP_DBLVERTICALBAR = 202,
    KEY_SCANCODE_KP_COLON = 203,
    KEY_SCANCODE_KP_HASH = 204,
    KEY_SCANCODE_KP_SPACE = 205,
    KEY_SCANCODE_KP_AT = 206,
    KEY_SCANCODE_KP_EXCLAM = 207,
    KEY_SCANCODE_KP_MEMSTORE = 208,
    KEY_SCANCODE_KP_MEMRECALL = 209,
    KEY_SCANCODE_KP_MEMCLEAR = 210,
    KEY_SCANCODE_KP_MEMADD = 211,
    KEY_SCANCODE_KP_MEMSUBTRACT = 212,
    KEY_SCANCODE_KP_MEMMULTIPLY = 213,
    KEY_SCANCODE_KP_MEMDIVIDE = 214,
    KEY_SCANCODE_KP_PLUSMINUS = 215,
    KEY_SCANCODE_KP_CLEAR = 216,
    KEY_SCANCODE_KP_CLEARENTRY = 217,
    KEY_SCANCODE_KP_BINARY = 218,
    KEY_SCANCODE_KP_OCTAL = 219,
    KEY_SCANCODE_KP_DECIMAL = 220,
    KEY_SCANCODE_KP_HEXADECIMAL = 221,

    KEY_SCANCODE_LCTRL = 224,
    KEY_SCANCODE_LSHIFT = 225,
    KEY_SCANCODE_LALT = 226, /**< alt, option */
    KEY_SCANCODE_LGUI = 227, /**< windows, command (apple), meta */
    KEY_SCANCODE_RCTRL = 228,
    KEY_SCANCODE_RSHIFT = 229,
    KEY_SCANCODE_RALT = 230, /**< alt gr, option */
    KEY_SCANCODE_RGUI = 231, /**< windows, command (apple), meta */

    KEY_SCANCODE_MODE = 257,   
    KEY_SCANCODE_AUDIONEXT = 258,
    KEY_SCANCODE_AUDIOPREV = 259,
    KEY_SCANCODE_AUDIOSTOP = 260,
    KEY_SCANCODE_AUDIOPLAY = 261,
    KEY_SCANCODE_AUDIOMUTE = 262,
    KEY_SCANCODE_MEDIASELECT = 263,
    KEY_SCANCODE_WWW = 264,
    KEY_SCANCODE_MAIL = 265,
    KEY_SCANCODE_CALCULATOR = 266,
    KEY_SCANCODE_COMPUTER = 267,
    KEY_SCANCODE_AC_SEARCH = 268,
    KEY_SCANCODE_AC_HOME = 269,
    KEY_SCANCODE_AC_BACK = 270,
    KEY_SCANCODE_AC_FORWARD = 271,
    KEY_SCANCODE_AC_STOP = 272,
    KEY_SCANCODE_AC_REFRESH = 273,
    KEY_SCANCODE_AC_BOOKMARKS = 274,

    KEY_SCANCODE_BRIGHTNESSDOWN = 275,
    KEY_SCANCODE_BRIGHTNESSUP = 276,
    KEY_SCANCODE_DISPLAYSWITCH = 277, /**< display mirroring/dual display
                                           switch, video mode switch */
    KEY_SCANCODE_KBDILLUMTOGGLE = 278,
    KEY_SCANCODE_KBDILLUMDOWN = 279,
    KEY_SCANCODE_KBDILLUMUP = 280,
    KEY_SCANCODE_EJECT = 281,
    KEY_SCANCODE_SLEEP = 282,

    KEY_SCANCODE_APP1 = 283,
    KEY_SCANCODE_APP2 = 284,

    KEY_SCANCODE_AUDIOREWIND = 285,
    KEY_SCANCODE_AUDIOFASTFORWARD = 286,


    KEY_NUM_SCANCODES = 512 
} KEY_Scancode;


#define KEY_SCANCODE_MASK (1<<30)
#define KEY_SCANCODE_TO_KEYCODE(X)  (X | KEY_SCANCODE_MASK)
typedef enum
{
    KEY_UNKNOWN = 0,

    KEY_RETURN = '\r',
    KEY_ESCAPE = '\x1B',
    KEY_BACKSPACE = '\b',
    KEY_TAB = '\t',
    KEY_SPACE = ' ',
    KEY_EXCLAIM = '!',
    KEY_QUOTEDBL = '"',
    KEY_HASH = '#',
    KEY_PERCENT = '%',
    KEY_DOLLAR = '$',
    KEY_AMPERSAND = '&',
    KEY_QUOTE = '\'',
    KEY_LEFTPAREN = '(',
    KEY_RIGHTPAREN = ')',
    KEY_ASTERISK = '*',
    KEY_PLUS = '+',
    KEY_COMMA = ',',
    KEY_MINUS = '-',
    KEY_PERIOD = '.',
    KEY_SLASH = '/',
    KEY_0 = '0',
    KEY_1 = '1',
    KEY_2 = '2',
    KEY_3 = '3',
    KEY_4 = '4',
    KEY_5 = '5',
    KEY_6 = '6',
    KEY_7 = '7',
    KEY_8 = '8',
    KEY_9 = '9',
    KEY_COLON = ':',
    KEY_SEMICOLON = ';',
    KEY_LESS = '<',
    KEY_EQUALS = '=',
    KEY_GREATER = '>',
    KEY_QUESTION = '?',
    KEY_AT = '@',

    /*
       Skip uppercase letters
     */

    KEY_LEFTBRACKET = '[',
    KEY_BACKSLASH = '\\',
    KEY_RIGHTBRACKET = ']',
    KEY_CARET = '^',
    KEY_UNDERSCORE = '_',
    KEY_BACKQUOTE = '`',
    KEY_a = 'a',
    KEY_b = 'b',
    KEY_c = 'c',
    KEY_d = 'd',
    KEY_e = 'e',
    KEY_f = 'f',
    KEY_g = 'g',
    KEY_h = 'h',
    KEY_i = 'i',
    KEY_j = 'j',
    KEY_k = 'k',
    KEY_l = 'l',
    KEY_m = 'm',
    KEY_n = 'n',
    KEY_o = 'o',
    KEY_p = 'p',
    KEY_q = 'q',
    KEY_r = 'r',
    KEY_s = 's',
    KEY_t = 't',
    KEY_u = 'u',
    KEY_v = 'v',
    KEY_w = 'w',
    KEY_x = 'x',
    KEY_y = 'y',
    KEY_z = 'z',

   KEY_F1 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F1),
    KEY_F2 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F2),
    KEY_F3 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F3),
    KEY_F4 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F4),
    KEY_F5 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F5),
    KEY_F6 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F6),
    KEY_F7 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F7),
    KEY_F8 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F8),
    KEY_F9 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F9),
    KEY_F10 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F10),
    KEY_F11 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F11),
    KEY_F12 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F12),

    KEY_PRINTSCREEN = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_PRINTSCREEN),
    KEY_SCROLLLOCK = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_SCROLLLOCK),
    KEY_PAUSE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_PAUSE),
    KEY_INSERT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_INSERT),
    KEY_HOME = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_HOME),
    KEY_PAGEUP = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_PAGEUP),
    KEY_DELETE = '\x7F',
    KEY_END = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_END),
    KEY_PAGEDOWN = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_PAGEDOWN),
    KEY_RIGHT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_RIGHT),
    KEY_LEFT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_LEFT),
    KEY_DOWN = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_DOWN),
    KEY_UP = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_UP),

    KEY_NUMLOCKCLEAR = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_NUMLOCKCLEAR),
    KEY_KP_DIVIDE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_DIVIDE),
    KEY_KP_MULTIPLY = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_MULTIPLY),
    KEY_KP_MINUS = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_MINUS),
    KEY_KP_PLUS = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_PLUS),
    KEY_KP_ENTER = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_ENTER),
    KEY_KP_1 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_1),
    KEY_KP_2 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_2),
    KEY_KP_3 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_3),
    KEY_KP_4 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_4),
    KEY_KP_5 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_5),
    KEY_KP_6 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_6),
    KEY_KP_7 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_7),
    KEY_KP_8 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_8),
    KEY_KP_9 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_9),
    KEY_KP_0 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_0),
    KEY_KP_PERIOD = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_PERIOD),

    KEY_APPLICATION = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_APPLICATION),
    KEY_POWER = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_POWER),
    KEY_KP_EQUALS = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_EQUALS),
    KEY_F13 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F13),
    KEY_F14 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F14),
    KEY_F15 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F15),
    KEY_F16 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F16),
    KEY_F17 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F17),
    KEY_F18 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F18),
    KEY_F19 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F19),
    KEY_F20 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F20),
    KEY_F21 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F21),
    KEY_F22 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F22),
    KEY_F23 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F23),
    KEY_F24 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_F24),
    KEY_EXECUTE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_EXECUTE),
    KEY_HELP = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_HELP),
    KEY_MENU = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_MENU),
    KEY_SELECT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_SELECT),
    KEY_STOP = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_STOP),
    KEY_AGAIN = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AGAIN),
    KEY_UNDO = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_UNDO),
    KEY_CUT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_CUT),
    KEY_COPY = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_COPY),
    KEY_PASTE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_PASTE),
    KEY_FIND = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_FIND),
    KEY_MUTE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_MUTE),
    KEY_VOLUMEUP = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_VOLUMEUP),
    KEY_VOLUMEDOWN = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_VOLUMEDOWN),
    KEY_KP_COMMA = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_COMMA),
    KEY_KP_EQUALSAS400 =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_EQUALSAS400),

    KEY_ALTERASE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_ALTERASE),
    KEY_SYSREQ = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_SYSREQ),
    KEY_CANCEL = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_CANCEL),
    KEY_CLEAR = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_CLEAR),
    KEY_PRIOR = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_PRIOR),
    KEY_RETURN2 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_RETURN2),
    KEY_SEPARATOR = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_SEPARATOR),
    KEY_OUT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_OUT),
    KEY_OPER = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_OPER),
    KEY_CLEARAGAIN = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_CLEARAGAIN),
    KEY_CRSEL = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_CRSEL),
    KEY_EXSEL = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_EXSEL),

    KEY_KP_00 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_00),
    KEY_KP_000 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_000),
    KEY_THOUSANDSSEPARATOR =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_THOUSANDSSEPARATOR),
    KEY_DECIMALSEPARATOR =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_DECIMALSEPARATOR),
    KEY_CURRENCYUNIT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_CURRENCYUNIT),
    KEY_CURRENCYSUBUNIT =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_CURRENCYSUBUNIT),
    KEY_KP_LEFTPAREN = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_LEFTPAREN),
    KEY_KP_RIGHTPAREN = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_RIGHTPAREN),
    KEY_KP_LEFTBRACE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_LEFTBRACE),
    KEY_KP_RIGHTBRACE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_RIGHTBRACE),
    KEY_KP_TAB = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_TAB),
    KEY_KP_BACKSPACE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_BACKSPACE),
    KEY_KP_A = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_A),
    KEY_KP_B = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_B),
    KEY_KP_C = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_C),
    KEY_KP_D = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_D),
    KEY_KP_E = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_E),
    KEY_KP_F = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_F),
    KEY_KP_XOR = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_XOR),
    KEY_KP_POWER = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_POWER),
    KEY_KP_PERCENT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_PERCENT),
    KEY_KP_LESS = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_LESS),
    KEY_KP_GREATER = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_GREATER),
    KEY_KP_AMPERSAND = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_AMPERSAND),
    KEY_KP_DBLAMPERSAND =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_DBLAMPERSAND),
    KEY_KP_VERTICALBAR =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_VERTICALBAR),
    KEY_KP_DBLVERTICALBAR =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_DBLVERTICALBAR),
    KEY_KP_COLON = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_COLON),
    KEY_KP_HASH = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_HASH),
    KEY_KP_SPACE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_SPACE),
    KEY_KP_AT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_AT),
    KEY_KP_EXCLAM = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_EXCLAM),
    KEY_KP_MEMSTORE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_MEMSTORE),
    KEY_KP_MEMRECALL = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_MEMRECALL),
    KEY_KP_MEMCLEAR = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_MEMCLEAR),
    KEY_KP_MEMADD = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_MEMADD),
    KEY_KP_MEMSUBTRACT =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_MEMSUBTRACT),
    KEY_KP_MEMMULTIPLY =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_MEMMULTIPLY),
    KEY_KP_MEMDIVIDE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_MEMDIVIDE),
    KEY_KP_PLUSMINUS = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_PLUSMINUS),
    KEY_KP_CLEAR = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_CLEAR),
    KEY_KP_CLEARENTRY = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_CLEARENTRY),
    KEY_KP_BINARY = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_BINARY),
    KEY_KP_OCTAL = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_OCTAL),
    KEY_KP_DECIMAL = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_DECIMAL),
    KEY_KP_HEXADECIMAL =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KP_HEXADECIMAL),

    KEY_LCTRL = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_LCTRL),
    KEY_LSHIFT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_LSHIFT),
    KEY_LALT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_LALT),
    KEY_LGUI = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_LGUI),
    KEY_RCTRL = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_RCTRL),
    KEY_RSHIFT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_RSHIFT),
    KEY_RALT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_RALT),
    KEY_RGUI = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_RGUI),

    KEY_MODE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_MODE),

    KEY_AUDIONEXT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AUDIONEXT),
    KEY_AUDIOPREV = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AUDIOPREV),
    KEY_AUDIOSTOP = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AUDIOSTOP),
    KEY_AUDIOPLAY = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AUDIOPLAY),
    KEY_AUDIOMUTE = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AUDIOMUTE),
    KEY_MEDIASELECT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_MEDIASELECT),
    KEY_WWW = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_WWW),
    KEY_MAIL = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_MAIL),
    KEY_CALCULATOR = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_CALCULATOR),
    KEY_COMPUTER = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_COMPUTER),
    KEY_AC_SEARCH = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AC_SEARCH),
    KEY_AC_HOME = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AC_HOME),
    KEY_AC_BACK = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AC_BACK),
    KEY_AC_FORWARD = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AC_FORWARD),
    KEY_AC_STOP = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AC_STOP),
    KEY_AC_REFRESH = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AC_REFRESH),
    KEY_AC_BOOKMARKS = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AC_BOOKMARKS),

    KEY_BRIGHTNESSDOWN =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_BRIGHTNESSDOWN),
    KEY_BRIGHTNESSUP = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_BRIGHTNESSUP),
    KEY_DISPLAYSWITCH = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_DISPLAYSWITCH),
    KEY_KBDILLUMTOGGLE =
        KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KBDILLUMTOGGLE),
    KEY_KBDILLUMDOWN = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KBDILLUMDOWN),
    KEY_KBDILLUMUP = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_KBDILLUMUP),
    KEY_EJECT = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_EJECT),
    KEY_SLEEP = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_SLEEP),
    KEY_APP1 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_APP1),
    KEY_APP2 = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_APP2),

    KEY_AUDIOREWIND = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AUDIOREWIND),
    KEY_AUDIOFASTFORWARD = KEY_SCANCODE_TO_KEYCODE(KEY_SCANCODE_AUDIOFASTFORWARD)
}KeyCode;


void	*mlx_init();
/*
**  needed before everything else.
**  return (void *)0 if failed
*/

void	mlx_free(void *mlx);

/*
** Basic actions
*/

void	*mlx_new_window(void *mlx_ptr, int size_x, int size_y, char *title);
/*
**  return void *0 if failed
*/
int	mlx_clear_window(void *mlx_ptr, void *win_ptr);
int	mlx_pixel_put(void *mlx_ptr, void *win_ptr, int x, int y, int color);
/*
**  origin for x & y is top left corner of the window
**  y down is positive
**  color is 0x00RRGGBB
*/


/*
** Image stuff
*/

void	*mlx_new_image(void *mlx_ptr,int width,int height);
/*
**  return void *0 if failed
**  obsolete : image2 data is stored using bit planes
**  void	*mlx_new_image2(void *mlx_ptr,int width,int height);
*/
char	*mlx_get_data_addr(void *img_ptr, int *bits_per_pixel,int *size_line, int *endian);
/*
**  endian : 0 = sever X is little endian, 1 = big endian
**  for mlx_new_image2, 2nd arg of mlx_get_data_addr is number_of_planes
*/
int	mlx_put_image_to_window(void *mlx_ptr, void *win_ptr, void *img_ptr, int x, int y);
int	mlx_get_color_value(void *mlx_ptr, int color);


/*
** dealing with Events
*/

int	mlx_mouse_hook (void *win_ptr, int (*funct_ptr)(), void *param);
int	mlx_key_hook (void *win_ptr, int (*funct_ptr)(), void *param);
int	mlx_expose_hook (void *win_ptr, int (*funct_ptr)(), void *param);

int	mlx_loop_hook (void *mlx_ptr, int (*funct_ptr)(), void *param);
int	mlx_loop (void *mlx_ptr);
int mlx_loop_end (void *mlx_ptr);

/*
**  hook funct are called as follow :
**
**   expose_hook(void *param);
**   key_hook(int keycode, void *param);
**   mouse_hook(int button, int x,int y, void *param);
**   loop_hook(void *param);
**
*/


/*
**  Usually asked...
*/

int	mlx_string_put(void *mlx_ptr, void *win_ptr, int x, int y, int color,
		       char *string);
void	mlx_set_font(void *mlx_ptr, void *win_ptr, char *name);
void	*mlx_xpm_to_image(void *mlx_ptr, char **xpm_data,
			  int *width, int *height);
void	*mlx_xpm_file_to_image(void *mlx_ptr, char *filename,
			       int *width, int *height);
int	mlx_destroy_window(void *mlx_ptr, void *win_ptr);

int	mlx_destroy_image(void *mlx_ptr, void *img_ptr);

int	mlx_destroy_display(void *mlx_ptr);

/*
**  generic hook system for all events, and minilibX functions that
**    can be hooked. Some macro and defines from X11/X.h are needed here.
*/

int	mlx_hook(void *win_ptr, int x_event, int x_mask, int (*funct)(), void *param);

int	mlx_do_key_autorepeatoff(void *mlx_ptr);
int	mlx_do_key_autorepeaton(void *mlx_ptr);
int	mlx_do_sync(void *mlx_ptr);

int	mlx_mouse_get_pos(void *mlx_ptr, void *win_ptr, int *x, int *y);
int	mlx_mouse_move(void *mlx_ptr, void *win_ptr, int x, int y);
int	mlx_mouse_hide(void *mlx_ptr, void *win_ptr);
int	mlx_mouse_show(void *mlx_ptr, void *win_ptr);

int	mlx_get_screen_size(void *mlx_ptr, int *sizex, int *sizey);


//extra
void	*mlx_png_file_to_image(void *mlx_ptr, char *file, int *width, int *height);
void mlx_joystick_rumble(int duration_ms);
void free_mlx(void *mlx_ptr);
#endif /* MLX_H */
